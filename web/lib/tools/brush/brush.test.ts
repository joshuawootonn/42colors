import { describe, expect, test } from 'vitest';

import {
    AbsolutePoint,
    absolutePointSchema,
    coordSort,
} from '../../geometry/coord';
import { getBrushPoints } from './brush';

const arr: AbsolutePoint[] = [
    absolutePointSchema.parse({ x: 1, y: 1 }),
    absolutePointSchema.parse({ x: 2, y: 2 }),
];

describe('brush', () => {
    test('brush size 1', () => {
        expect(getBrushPoints(arr, 1, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
            ].sort(coordSort),
        );
    });
    test('brush size 2', () => {
        expect(getBrushPoints(arr, 2, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: 0, y: 0 }),
                absolutePointSchema.parse({ x: 0, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 0 }),
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
            ].sort(coordSort),
        );
    });
    test('brush size 3', () => {
        expect(getBrushPoints(arr, 3, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: 0, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 0 }),
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 3 }),
                absolutePointSchema.parse({ x: 3, y: 2 }),
            ].sort(coordSort),
        );
    });
    test('brush size 4', () => {
        expect(getBrushPoints(arr, 4, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: -1, y: 0 }),
                absolutePointSchema.parse({ x: -1, y: 1 }),
                absolutePointSchema.parse({ x: 0, y: -1 }),
                absolutePointSchema.parse({ x: 0, y: 0 }),
                absolutePointSchema.parse({ x: 0, y: 1 }),
                absolutePointSchema.parse({ x: 0, y: 2 }),
                absolutePointSchema.parse({ x: 1, y: -1 }),
                absolutePointSchema.parse({ x: 1, y: 0 }),
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 2 }),
                absolutePointSchema.parse({ x: 1, y: 3 }),
                absolutePointSchema.parse({ x: 2, y: 0 }),
                absolutePointSchema.parse({ x: 2, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 3 }),
                absolutePointSchema.parse({ x: 3, y: 1 }),
                absolutePointSchema.parse({ x: 3, y: 2 }),
            ].sort(coordSort),
        );
    });
    test('brush size 5', () => {
        expect(getBrushPoints(arr, 5, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: -1, y: 0 }),
                absolutePointSchema.parse({ x: -1, y: 1 }),
                absolutePointSchema.parse({ x: -1, y: 2 }),
                absolutePointSchema.parse({ x: 0, y: -1 }),
                absolutePointSchema.parse({ x: 0, y: 0 }),
                absolutePointSchema.parse({ x: 0, y: 1 }),
                absolutePointSchema.parse({ x: 0, y: 2 }),
                absolutePointSchema.parse({ x: 0, y: 3 }),
                absolutePointSchema.parse({ x: 1, y: -1 }),
                absolutePointSchema.parse({ x: 1, y: 0 }),
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 2 }),
                absolutePointSchema.parse({ x: 1, y: 3 }),
                absolutePointSchema.parse({ x: 1, y: 4 }),
                absolutePointSchema.parse({ x: 2, y: -1 }),
                absolutePointSchema.parse({ x: 2, y: 0 }),
                absolutePointSchema.parse({ x: 2, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 3 }),
                absolutePointSchema.parse({ x: 2, y: 4 }),
                absolutePointSchema.parse({ x: 3, y: 0 }),
                absolutePointSchema.parse({ x: 3, y: 1 }),
                absolutePointSchema.parse({ x: 3, y: 2 }),
                absolutePointSchema.parse({ x: 3, y: 3 }),
                absolutePointSchema.parse({ x: 3, y: 4 }),
                absolutePointSchema.parse({ x: 4, y: 1 }),
                absolutePointSchema.parse({ x: 4, y: 2 }),
                absolutePointSchema.parse({ x: 4, y: 3 }),
            ].sort(coordSort),
        );
    });

    test('brush size 6', () => {
        expect(getBrushPoints(arr, 6, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: -2, y: -1 }),
                absolutePointSchema.parse({ x: -2, y: 0 }),
                absolutePointSchema.parse({ x: -2, y: 1 }),
                absolutePointSchema.parse({ x: -2, y: 2 }),
                absolutePointSchema.parse({ x: -1, y: -2 }),
                absolutePointSchema.parse({ x: -1, y: -1 }),
                absolutePointSchema.parse({ x: -1, y: 0 }),
                absolutePointSchema.parse({ x: -1, y: 1 }),
                absolutePointSchema.parse({ x: -1, y: 2 }),
                absolutePointSchema.parse({ x: -1, y: 3 }),
                absolutePointSchema.parse({ x: 0, y: -2 }),
                absolutePointSchema.parse({ x: 0, y: -1 }),
                absolutePointSchema.parse({ x: 0, y: 0 }),
                absolutePointSchema.parse({ x: 0, y: 1 }),
                absolutePointSchema.parse({ x: 0, y: 2 }),
                absolutePointSchema.parse({ x: 0, y: 3 }),
                absolutePointSchema.parse({ x: 0, y: 4 }),
                absolutePointSchema.parse({ x: 1, y: -2 }),
                absolutePointSchema.parse({ x: 1, y: -1 }),
                absolutePointSchema.parse({ x: 1, y: 0 }),
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 2 }),
                absolutePointSchema.parse({ x: 1, y: 3 }),
                absolutePointSchema.parse({ x: 1, y: 4 }),
                absolutePointSchema.parse({ x: 2, y: -2 }),
                absolutePointSchema.parse({ x: 2, y: -1 }),
                absolutePointSchema.parse({ x: 2, y: 0 }),
                absolutePointSchema.parse({ x: 2, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 3 }),
                absolutePointSchema.parse({ x: 2, y: 4 }),
                absolutePointSchema.parse({ x: 3, y: -1 }),
                absolutePointSchema.parse({ x: 3, y: 0 }),
                absolutePointSchema.parse({ x: 3, y: 1 }),
                absolutePointSchema.parse({ x: 3, y: 2 }),
                absolutePointSchema.parse({ x: 3, y: 3 }),
                absolutePointSchema.parse({ x: 3, y: 4 }),
                absolutePointSchema.parse({ x: 4, y: 0 }),
                absolutePointSchema.parse({ x: 4, y: 1 }),
                absolutePointSchema.parse({ x: 4, y: 2 }),
                absolutePointSchema.parse({ x: 4, y: 3 }),
            ].sort(coordSort),
        );
    });

    test('brush size 7', () => {
        expect(getBrushPoints(arr, 7, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: -2, y: -1 }),
                absolutePointSchema.parse({ x: -2, y: 0 }),
                absolutePointSchema.parse({ x: -2, y: 1 }),
                absolutePointSchema.parse({ x: -2, y: 2 }),
                absolutePointSchema.parse({ x: -2, y: 3 }),
                absolutePointSchema.parse({ x: -1, y: -2 }),
                absolutePointSchema.parse({ x: -1, y: -1 }),
                absolutePointSchema.parse({ x: -1, y: 0 }),
                absolutePointSchema.parse({ x: -1, y: 1 }),
                absolutePointSchema.parse({ x: -1, y: 2 }),
                absolutePointSchema.parse({ x: -1, y: 3 }),
                absolutePointSchema.parse({ x: -1, y: 4 }),
                absolutePointSchema.parse({ x: 0, y: -2 }),
                absolutePointSchema.parse({ x: 0, y: -1 }),
                absolutePointSchema.parse({ x: 0, y: 0 }),
                absolutePointSchema.parse({ x: 0, y: 1 }),
                absolutePointSchema.parse({ x: 0, y: 2 }),
                absolutePointSchema.parse({ x: 0, y: 3 }),
                absolutePointSchema.parse({ x: 0, y: 4 }),
                absolutePointSchema.parse({ x: 0, y: 5 }),
                absolutePointSchema.parse({ x: 1, y: -2 }),
                absolutePointSchema.parse({ x: 1, y: -1 }),
                absolutePointSchema.parse({ x: 1, y: 0 }),
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 2 }),
                absolutePointSchema.parse({ x: 1, y: 3 }),
                absolutePointSchema.parse({ x: 1, y: 4 }),
                absolutePointSchema.parse({ x: 1, y: 5 }),
                absolutePointSchema.parse({ x: 2, y: -2 }),
                absolutePointSchema.parse({ x: 2, y: -1 }),
                absolutePointSchema.parse({ x: 2, y: 0 }),
                absolutePointSchema.parse({ x: 2, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 3 }),
                absolutePointSchema.parse({ x: 2, y: 4 }),
                absolutePointSchema.parse({ x: 2, y: 5 }),
                absolutePointSchema.parse({ x: 3, y: -2 }),
                absolutePointSchema.parse({ x: 3, y: -1 }),
                absolutePointSchema.parse({ x: 3, y: 0 }),
                absolutePointSchema.parse({ x: 3, y: 1 }),
                absolutePointSchema.parse({ x: 3, y: 2 }),
                absolutePointSchema.parse({ x: 3, y: 3 }),
                absolutePointSchema.parse({ x: 3, y: 4 }),
                absolutePointSchema.parse({ x: 3, y: 5 }),
                absolutePointSchema.parse({ x: 4, y: -1 }),
                absolutePointSchema.parse({ x: 4, y: 0 }),
                absolutePointSchema.parse({ x: 4, y: 1 }),
                absolutePointSchema.parse({ x: 4, y: 2 }),
                absolutePointSchema.parse({ x: 4, y: 3 }),
                absolutePointSchema.parse({ x: 4, y: 4 }),
                absolutePointSchema.parse({ x: 4, y: 5 }),
                absolutePointSchema.parse({ x: 5, y: 0 }),
                absolutePointSchema.parse({ x: 5, y: 1 }),
                absolutePointSchema.parse({ x: 5, y: 2 }),
                absolutePointSchema.parse({ x: 5, y: 3 }),
                absolutePointSchema.parse({ x: 5, y: 4 }),
            ].sort(coordSort),
        );
    });

    test('brush size 8', () => {
        expect(getBrushPoints(arr, 8, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: -3, y: -2 }),
                absolutePointSchema.parse({ x: -3, y: -1 }),
                absolutePointSchema.parse({ x: -3, y: 0 }),
                absolutePointSchema.parse({ x: -3, y: 1 }),
                absolutePointSchema.parse({ x: -3, y: 2 }),
                absolutePointSchema.parse({ x: -3, y: 3 }),
                absolutePointSchema.parse({ x: -2, y: -3 }),
                absolutePointSchema.parse({ x: -2, y: -2 }),
                absolutePointSchema.parse({ x: -2, y: -1 }),
                absolutePointSchema.parse({ x: -2, y: 0 }),
                absolutePointSchema.parse({ x: -2, y: 1 }),
                absolutePointSchema.parse({ x: -2, y: 2 }),
                absolutePointSchema.parse({ x: -2, y: 3 }),
                absolutePointSchema.parse({ x: -2, y: 4 }),
                absolutePointSchema.parse({ x: -1, y: -3 }),
                absolutePointSchema.parse({ x: -1, y: -2 }),
                absolutePointSchema.parse({ x: -1, y: -1 }),
                absolutePointSchema.parse({ x: -1, y: 0 }),
                absolutePointSchema.parse({ x: -1, y: 1 }),
                absolutePointSchema.parse({ x: -1, y: 2 }),
                absolutePointSchema.parse({ x: -1, y: 3 }),
                absolutePointSchema.parse({ x: -1, y: 4 }),
                absolutePointSchema.parse({ x: -1, y: 5 }),
                absolutePointSchema.parse({ x: 0, y: -3 }),
                absolutePointSchema.parse({ x: 0, y: -2 }),
                absolutePointSchema.parse({ x: 0, y: -1 }),
                absolutePointSchema.parse({ x: 0, y: 0 }),
                absolutePointSchema.parse({ x: 0, y: 1 }),
                absolutePointSchema.parse({ x: 0, y: 2 }),
                absolutePointSchema.parse({ x: 0, y: 3 }),
                absolutePointSchema.parse({ x: 0, y: 4 }),
                absolutePointSchema.parse({ x: 0, y: 5 }),
                absolutePointSchema.parse({ x: 1, y: -3 }),
                absolutePointSchema.parse({ x: 1, y: -2 }),
                absolutePointSchema.parse({ x: 1, y: -1 }),
                absolutePointSchema.parse({ x: 1, y: 0 }),
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 2 }),
                absolutePointSchema.parse({ x: 1, y: 3 }),
                absolutePointSchema.parse({ x: 1, y: 4 }),
                absolutePointSchema.parse({ x: 1, y: 5 }),
                absolutePointSchema.parse({ x: 2, y: -3 }),
                absolutePointSchema.parse({ x: 2, y: -2 }),
                absolutePointSchema.parse({ x: 2, y: -1 }),
                absolutePointSchema.parse({ x: 2, y: 0 }),
                absolutePointSchema.parse({ x: 2, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 3 }),
                absolutePointSchema.parse({ x: 2, y: 4 }),
                absolutePointSchema.parse({ x: 2, y: 5 }),
                absolutePointSchema.parse({ x: 3, y: -3 }),
                absolutePointSchema.parse({ x: 3, y: -2 }),
                absolutePointSchema.parse({ x: 3, y: -1 }),
                absolutePointSchema.parse({ x: 3, y: 0 }),
                absolutePointSchema.parse({ x: 3, y: 1 }),
                absolutePointSchema.parse({ x: 3, y: 2 }),
                absolutePointSchema.parse({ x: 3, y: 3 }),
                absolutePointSchema.parse({ x: 3, y: 4 }),
                absolutePointSchema.parse({ x: 3, y: 5 }),
                absolutePointSchema.parse({ x: 4, y: -2 }),
                absolutePointSchema.parse({ x: 4, y: -1 }),
                absolutePointSchema.parse({ x: 4, y: 0 }),
                absolutePointSchema.parse({ x: 4, y: 1 }),
                absolutePointSchema.parse({ x: 4, y: 2 }),
                absolutePointSchema.parse({ x: 4, y: 3 }),
                absolutePointSchema.parse({ x: 4, y: 4 }),
                absolutePointSchema.parse({ x: 4, y: 5 }),
                absolutePointSchema.parse({ x: 5, y: -1 }),
                absolutePointSchema.parse({ x: 5, y: 0 }),
                absolutePointSchema.parse({ x: 5, y: 1 }),
                absolutePointSchema.parse({ x: 5, y: 2 }),
                absolutePointSchema.parse({ x: 5, y: 3 }),
                absolutePointSchema.parse({ x: 5, y: 4 }),
            ].sort(coordSort),
        );
    });

    test('brush size 9', () => {
        expect(getBrushPoints(arr, 9, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: -3, y: -2 }),
                absolutePointSchema.parse({ x: -3, y: -1 }),
                absolutePointSchema.parse({ x: -3, y: 0 }),
                absolutePointSchema.parse({ x: -3, y: 1 }),
                absolutePointSchema.parse({ x: -3, y: 2 }),
                absolutePointSchema.parse({ x: -3, y: 3 }),
                absolutePointSchema.parse({ x: -3, y: 4 }),
                absolutePointSchema.parse({ x: -2, y: -3 }),
                absolutePointSchema.parse({ x: -2, y: -2 }),
                absolutePointSchema.parse({ x: -2, y: -1 }),
                absolutePointSchema.parse({ x: -2, y: 0 }),
                absolutePointSchema.parse({ x: -2, y: 1 }),
                absolutePointSchema.parse({ x: -2, y: 2 }),
                absolutePointSchema.parse({ x: -2, y: 3 }),
                absolutePointSchema.parse({ x: -2, y: 4 }),
                absolutePointSchema.parse({ x: -2, y: 5 }),
                absolutePointSchema.parse({ x: -1, y: -3 }),
                absolutePointSchema.parse({ x: -1, y: -2 }),
                absolutePointSchema.parse({ x: -1, y: -1 }),
                absolutePointSchema.parse({ x: -1, y: 0 }),
                absolutePointSchema.parse({ x: -1, y: 1 }),
                absolutePointSchema.parse({ x: -1, y: 2 }),
                absolutePointSchema.parse({ x: -1, y: 3 }),
                absolutePointSchema.parse({ x: -1, y: 4 }),
                absolutePointSchema.parse({ x: -1, y: 5 }),
                absolutePointSchema.parse({ x: -1, y: 6 }),
                absolutePointSchema.parse({ x: 0, y: -3 }),
                absolutePointSchema.parse({ x: 0, y: -2 }),
                absolutePointSchema.parse({ x: 0, y: -1 }),
                absolutePointSchema.parse({ x: 0, y: 0 }),
                absolutePointSchema.parse({ x: 0, y: 1 }),
                absolutePointSchema.parse({ x: 0, y: 2 }),
                absolutePointSchema.parse({ x: 0, y: 3 }),
                absolutePointSchema.parse({ x: 0, y: 4 }),
                absolutePointSchema.parse({ x: 0, y: 5 }),
                absolutePointSchema.parse({ x: 0, y: 6 }),
                absolutePointSchema.parse({ x: 1, y: -3 }),
                absolutePointSchema.parse({ x: 1, y: -2 }),
                absolutePointSchema.parse({ x: 1, y: -1 }),
                absolutePointSchema.parse({ x: 1, y: 0 }),
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 2 }),
                absolutePointSchema.parse({ x: 1, y: 3 }),
                absolutePointSchema.parse({ x: 1, y: 4 }),
                absolutePointSchema.parse({ x: 1, y: 5 }),
                absolutePointSchema.parse({ x: 1, y: 6 }),
                absolutePointSchema.parse({ x: 2, y: -3 }),
                absolutePointSchema.parse({ x: 2, y: -2 }),
                absolutePointSchema.parse({ x: 2, y: -1 }),
                absolutePointSchema.parse({ x: 2, y: 0 }),
                absolutePointSchema.parse({ x: 2, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 3 }),
                absolutePointSchema.parse({ x: 2, y: 4 }),
                absolutePointSchema.parse({ x: 2, y: 5 }),
                absolutePointSchema.parse({ x: 2, y: 6 }),
                absolutePointSchema.parse({ x: 3, y: -3 }),
                absolutePointSchema.parse({ x: 3, y: -2 }),
                absolutePointSchema.parse({ x: 3, y: -1 }),
                absolutePointSchema.parse({ x: 3, y: 0 }),
                absolutePointSchema.parse({ x: 3, y: 1 }),
                absolutePointSchema.parse({ x: 3, y: 2 }),
                absolutePointSchema.parse({ x: 3, y: 3 }),
                absolutePointSchema.parse({ x: 3, y: 4 }),
                absolutePointSchema.parse({ x: 3, y: 5 }),
                absolutePointSchema.parse({ x: 3, y: 6 }),
                absolutePointSchema.parse({ x: 4, y: -3 }),
                absolutePointSchema.parse({ x: 4, y: -2 }),
                absolutePointSchema.parse({ x: 4, y: -1 }),
                absolutePointSchema.parse({ x: 4, y: 0 }),
                absolutePointSchema.parse({ x: 4, y: 1 }),
                absolutePointSchema.parse({ x: 4, y: 2 }),
                absolutePointSchema.parse({ x: 4, y: 3 }),
                absolutePointSchema.parse({ x: 4, y: 4 }),
                absolutePointSchema.parse({ x: 4, y: 5 }),
                absolutePointSchema.parse({ x: 4, y: 6 }),
                absolutePointSchema.parse({ x: 5, y: -2 }),
                absolutePointSchema.parse({ x: 5, y: -1 }),
                absolutePointSchema.parse({ x: 5, y: 0 }),
                absolutePointSchema.parse({ x: 5, y: 1 }),
                absolutePointSchema.parse({ x: 5, y: 2 }),
                absolutePointSchema.parse({ x: 5, y: 3 }),
                absolutePointSchema.parse({ x: 5, y: 4 }),
                absolutePointSchema.parse({ x: 5, y: 5 }),
                absolutePointSchema.parse({ x: 5, y: 6 }),
                absolutePointSchema.parse({ x: 6, y: -1 }),
                absolutePointSchema.parse({ x: 6, y: 0 }),
                absolutePointSchema.parse({ x: 6, y: 1 }),
                absolutePointSchema.parse({ x: 6, y: 2 }),
                absolutePointSchema.parse({ x: 6, y: 3 }),
                absolutePointSchema.parse({ x: 6, y: 4 }),
                absolutePointSchema.parse({ x: 6, y: 5 }),
            ].sort(coordSort),
        );
    });

    test('brush size 10', () => {
        expect(getBrushPoints(arr, 10, 1).sort(coordSort)).toEqual(
            [
                absolutePointSchema.parse({ x: -4, y: -3 }),
                absolutePointSchema.parse({ x: -4, y: -2 }),
                absolutePointSchema.parse({ x: -4, y: -1 }),
                absolutePointSchema.parse({ x: -4, y: 0 }),
                absolutePointSchema.parse({ x: -4, y: 1 }),
                absolutePointSchema.parse({ x: -4, y: 2 }),
                absolutePointSchema.parse({ x: -4, y: 3 }),
                absolutePointSchema.parse({ x: -4, y: 4 }),
                absolutePointSchema.parse({ x: -3, y: -4 }),
                absolutePointSchema.parse({ x: -3, y: -3 }),
                absolutePointSchema.parse({ x: -3, y: -2 }),
                absolutePointSchema.parse({ x: -3, y: -1 }),
                absolutePointSchema.parse({ x: -3, y: 0 }),
                absolutePointSchema.parse({ x: -3, y: 1 }),
                absolutePointSchema.parse({ x: -3, y: 2 }),
                absolutePointSchema.parse({ x: -3, y: 3 }),
                absolutePointSchema.parse({ x: -3, y: 4 }),
                absolutePointSchema.parse({ x: -3, y: 5 }),
                absolutePointSchema.parse({ x: -2, y: -4 }),
                absolutePointSchema.parse({ x: -2, y: -3 }),
                absolutePointSchema.parse({ x: -2, y: -2 }),
                absolutePointSchema.parse({ x: -2, y: -1 }),
                absolutePointSchema.parse({ x: -2, y: 0 }),
                absolutePointSchema.parse({ x: -2, y: 1 }),
                absolutePointSchema.parse({ x: -2, y: 2 }),
                absolutePointSchema.parse({ x: -2, y: 3 }),
                absolutePointSchema.parse({ x: -2, y: 4 }),
                absolutePointSchema.parse({ x: -2, y: 5 }),
                absolutePointSchema.parse({ x: -2, y: 6 }),
                absolutePointSchema.parse({ x: -1, y: -4 }),
                absolutePointSchema.parse({ x: -1, y: -3 }),
                absolutePointSchema.parse({ x: -1, y: -2 }),
                absolutePointSchema.parse({ x: -1, y: -1 }),
                absolutePointSchema.parse({ x: -1, y: 0 }),
                absolutePointSchema.parse({ x: -1, y: 1 }),
                absolutePointSchema.parse({ x: -1, y: 2 }),
                absolutePointSchema.parse({ x: -1, y: 3 }),
                absolutePointSchema.parse({ x: -1, y: 4 }),
                absolutePointSchema.parse({ x: -1, y: 5 }),
                absolutePointSchema.parse({ x: -1, y: 6 }),
                absolutePointSchema.parse({ x: 0, y: -4 }),
                absolutePointSchema.parse({ x: 0, y: -3 }),
                absolutePointSchema.parse({ x: 0, y: -2 }),
                absolutePointSchema.parse({ x: 0, y: -1 }),
                absolutePointSchema.parse({ x: 0, y: 0 }),
                absolutePointSchema.parse({ x: 0, y: 1 }),
                absolutePointSchema.parse({ x: 0, y: 2 }),
                absolutePointSchema.parse({ x: 0, y: 3 }),
                absolutePointSchema.parse({ x: 0, y: 4 }),
                absolutePointSchema.parse({ x: 0, y: 5 }),
                absolutePointSchema.parse({ x: 0, y: 6 }),
                absolutePointSchema.parse({ x: 1, y: -4 }),
                absolutePointSchema.parse({ x: 1, y: -3 }),
                absolutePointSchema.parse({ x: 1, y: -2 }),
                absolutePointSchema.parse({ x: 1, y: -1 }),
                absolutePointSchema.parse({ x: 1, y: 0 }),
                absolutePointSchema.parse({ x: 1, y: 1 }),
                absolutePointSchema.parse({ x: 1, y: 2 }),
                absolutePointSchema.parse({ x: 1, y: 3 }),
                absolutePointSchema.parse({ x: 1, y: 4 }),
                absolutePointSchema.parse({ x: 1, y: 5 }),
                absolutePointSchema.parse({ x: 1, y: 6 }),
                absolutePointSchema.parse({ x: 2, y: -4 }),
                absolutePointSchema.parse({ x: 2, y: -3 }),
                absolutePointSchema.parse({ x: 2, y: -2 }),
                absolutePointSchema.parse({ x: 2, y: -1 }),
                absolutePointSchema.parse({ x: 2, y: 0 }),
                absolutePointSchema.parse({ x: 2, y: 1 }),
                absolutePointSchema.parse({ x: 2, y: 2 }),
                absolutePointSchema.parse({ x: 2, y: 3 }),
                absolutePointSchema.parse({ x: 2, y: 4 }),
                absolutePointSchema.parse({ x: 2, y: 5 }),
                absolutePointSchema.parse({ x: 2, y: 6 }),
                absolutePointSchema.parse({ x: 3, y: -4 }),
                absolutePointSchema.parse({ x: 3, y: -3 }),
                absolutePointSchema.parse({ x: 3, y: -2 }),
                absolutePointSchema.parse({ x: 3, y: -1 }),
                absolutePointSchema.parse({ x: 3, y: 0 }),
                absolutePointSchema.parse({ x: 3, y: 1 }),
                absolutePointSchema.parse({ x: 3, y: 2 }),
                absolutePointSchema.parse({ x: 3, y: 3 }),
                absolutePointSchema.parse({ x: 3, y: 4 }),
                absolutePointSchema.parse({ x: 3, y: 5 }),
                absolutePointSchema.parse({ x: 3, y: 6 }),
                absolutePointSchema.parse({ x: 4, y: -4 }),
                absolutePointSchema.parse({ x: 4, y: -3 }),
                absolutePointSchema.parse({ x: 4, y: -2 }),
                absolutePointSchema.parse({ x: 4, y: -1 }),
                absolutePointSchema.parse({ x: 4, y: 0 }),
                absolutePointSchema.parse({ x: 4, y: 1 }),
                absolutePointSchema.parse({ x: 4, y: 2 }),
                absolutePointSchema.parse({ x: 4, y: 3 }),
                absolutePointSchema.parse({ x: 4, y: 4 }),
                absolutePointSchema.parse({ x: 4, y: 5 }),
                absolutePointSchema.parse({ x: 4, y: 6 }),
                absolutePointSchema.parse({ x: 5, y: -3 }),
                absolutePointSchema.parse({ x: 5, y: -2 }),
                absolutePointSchema.parse({ x: 5, y: -1 }),
                absolutePointSchema.parse({ x: 5, y: 0 }),
                absolutePointSchema.parse({ x: 5, y: 1 }),
                absolutePointSchema.parse({ x: 5, y: 2 }),
                absolutePointSchema.parse({ x: 5, y: 3 }),
                absolutePointSchema.parse({ x: 5, y: 4 }),
                absolutePointSchema.parse({ x: 5, y: 5 }),
                absolutePointSchema.parse({ x: 5, y: 6 }),
                absolutePointSchema.parse({ x: 6, y: -2 }),
                absolutePointSchema.parse({ x: 6, y: -1 }),
                absolutePointSchema.parse({ x: 6, y: 0 }),
                absolutePointSchema.parse({ x: 6, y: 1 }),
                absolutePointSchema.parse({ x: 6, y: 2 }),
                absolutePointSchema.parse({ x: 6, y: 3 }),
                absolutePointSchema.parse({ x: 6, y: 4 }),
                absolutePointSchema.parse({ x: 6, y: 5 }),
            ].sort(coordSort),
        );
    });

    test('brush size out of range defaults to empty', () => {
        expect(getBrushPoints(arr, 11, 1)).toEqual([]);
        expect(getBrushPoints(arr, 0, 1)).toEqual([]);
        expect(getBrushPoints(arr, -1, 1)).toEqual([]);
    });
});
